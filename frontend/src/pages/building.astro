---
// src/pages/en-proceso.astro

// Assets
import background from "@ast/background.avif";

// Estilos
import "@sty/style__.css";

// Componentes
import Layout from "@lyt/Layout.astro";
import Header from "@cmt/header.astro";
import Carrusel from "@cmt/carrusel.astro";
import Foot from "@cmt/footer.astro";
---

<Layout title="P√°gina En Proceso | BA Atelier">
  <img id="background" src={background.src} alt="" fetchpriority="high" />

  <Header />
  <Carrusel
    text="Creando algo extraordinario"
    speed="40s"
    backgroundColor="bg-[#b56576]"
    textColor="text-white"
    separator=" ‚ú® "
  />

  <main class="process-main mb-30">
    <div class="process-container">
      <div class="process-content">
        <h1 class="process-title">P√°gina en</h1>
        <h2 class="process-subtitle">Construcci√≥n</h2>

        <!-- cuenta regresiva -->
        <div id="countdown" class="text-2xl text-[#355070] mt-6">
          Pr√≥ximamente...
        </div>

        <!-- Barra de progreso -->
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill"></div>
          </div>
          <span class="progress-text">Dise√±ando la experiencia perfecta...</span
          >
        </div>

        <p class="process-description">
          Como cada una de nuestras creaciones de alta costura, esta p√°gina est√°
          siendo cuidadosamente dise√±ada con atenci√≥n a cada detalle. Nuestro
          atelier digital trabaja para ofrecerte una experiencia tan exclusiva
          como nuestras prendas.
        </p>

        <!-- Separador decorativo -->
        <div class="m-auto mt-6 mb-8 bg-[#e26d5c] w-[400px] h-[2px]"></div>

        <!-- Informaci√≥n adicional -->
        <div class="process-info">
          <div class="info-card">
            <div class="info-icon">‚úÇÔ∏è</div>
            <h3>Dise√±o</h3>
            <p>Creando una interfaz elegante y sofisticada</p>
          </div>
          <div class="info-card">
            <div class="info-icon">üßµ</div>
            <h3>Desarrollo</h3>
            <p>Construyendo cada funcionalidad con precisi√≥n</p>
          </div>
          <div class="info-card">
            <div class="info-icon">‚ú®</div>
            <h3>Perfecci√≥n</h3>
            <p>Puliendo cada detalle para la experiencia ideal</p>
          </div>
        </div>

        <div class="action-buttons">
          <a href="/" class="btn btn-primary">Volver al Inicio</a>
          <a href="/contacto" class="btn btn-secondary">Cont√°ctanos</a>
        </div>
      </div>
    </div>
  </main>
  <Foot />
</Layout>

<style>
  .process-main {
    min-height: 80vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 40px 20px;
    position: relative;
    z-index: 1;
  }

  .process-container {
    position: relative;
    max-width: 900px;
    width: 100%;
    text-align: center;
  }

  /* Elementos decorativos de fondo */
  .bg-decoration {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.1;
    z-index: -1;
    pointer-events: none;
  }

  .sewing-pattern {
    position: absolute;
    width: 150px;
    height: 150px;
    border: 2px dashed #b56576;
    border-radius: 50%;
    animation: rotate 20s linear infinite;
  }

  .sewing-pattern:nth-child(1) {
    top: 10%;
    right: 15%;
    animation-delay: 0s;
  }

  .sewing-pattern:nth-child(2) {
    bottom: 20%;
    left: 10%;
    animation-delay: -7s;
  }

  .sewing-pattern:nth-child(3) {
    top: 60%;
    right: 5%;
    animation-delay: -14s;
  }

  .thread-line {
    position: absolute;
    height: 2px;
    background: linear-gradient(90deg, transparent, #e26d5c, transparent);
    animation: thread-move 3s ease-in-out infinite;
  }

  .thread-line:nth-child(4) {
    top: 30%;
    left: 20%;
    width: 200px;
    animation-delay: 0s;
  }

  .thread-line:nth-child(5) {
    bottom: 40%;
    right: 20%;
    width: 150px;
    animation-delay: 1.5s;
  }

  .needle-sparkle {
    position: absolute;
    width: 6px;
    height: 6px;
    background: #e26d5c;
    border-radius: 50%;
    animation: sparkle-pulse 2s ease-in-out infinite;
  }

  .needle-sparkle:nth-child(6) {
    top: 25%;
    left: 15%;
    animation-delay: 0s;
  }

  .needle-sparkle:nth-child(7) {
    top: 70%;
    right: 25%;
    animation-delay: 0.7s;
  }

  .needle-sparkle:nth-child(8) {
    bottom: 25%;
    left: 30%;
    animation-delay: 1.4s;
  }

  @keyframes rotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes thread-move {
    0%,
    100% {
      opacity: 0.3;
      transform: translateX(-20px);
    }
    50% {
      opacity: 1;
      transform: translateX(20px);
    }
  }

  @keyframes sparkle-pulse {
    0%,
    100% {
      opacity: 0;
      transform: scale(0);
    }
    50% {
      opacity: 1;
      transform: scale(1.5);
    }
  }

  /* Icono de costura */
  .sewing-icon {
    margin-bottom: 30px;
    animation: fadeInScale 1s ease-out;
  }

  .sewing-machine {
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.1));
  }

  .rotating-circle {
    animation: rotate 8s linear infinite;
    transform-origin: center;
  }

  .needle {
    animation: needle-move 1.5s ease-in-out infinite;
  }

  @keyframes needle-move {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(10px);
    }
  }

  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.5);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .process-content {
    animation: fadeInUp 1s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .process-title {
    font-size: clamp(2.5rem, 7vw, 4rem);
    font-style: italic;
    color: #2c2c2c;
    margin-bottom: 10px;
    font-weight: 300;
    font-family: "Georgia", serif;
  }

  .process-subtitle {
    font-size: clamp(1.8rem, 5vw, 2.5rem);
    font-style: italic;
    color: #b56576;
    margin-bottom: 40px;
    font-weight: 300;
    font-family: "Georgia", serif;
  }

  /* Barra de progreso */
  .progress-container {
    margin: 40px 0;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background: rgba(181, 101, 118, 0.2);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 15px;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #b56576, #e26d5c);
    border-radius: 4px;
    width: 0%;
    animation: progress-fill 3s ease-in-out infinite;
  }

  @keyframes progress-fill {
    0% {
      width: 0%;
    }
    50% {
      width: 75%;
    }
    100% {
      width: 0%;
    }
  }

  .progress-text {
    font-size: 0.9rem;
    color: #383737;
    font-style: italic;
  }

  .process-description {
    font-size: 1.1rem;
    color: #282828;
    line-height: 1.8;
    margin-bottom: 40px;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  /* Tarjetas de informaci√≥n */
  .process-info {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 30px;
    margin: 50px 0;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  .info-card {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    padding: 30px 20px;
    transition: all 0.3s ease;
    border: 1px solid rgba(181, 101, 118, 0.1);
  }

  .info-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(181, 101, 118, 0.2);
  }

  .info-icon {
    font-size: 2.5rem;
    margin-bottom: 15px;
  }

  .info-card h3 {
    font-size: 1.3rem;
    color: #2c2c2c;
    margin-bottom: 10px;
    font-family: "Georgia", serif;
  }

  .info-card p {
    color: #666;
    line-height: 1.6;
    font-size: 0.95rem;
  }

  .action-buttons {
    display: flex;
    gap: 20px;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 40px;
  }

  .btn {
    padding: 15px 35px;
    text-decoration: none;
    border-radius: 30px;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    display: inline-block;
  }

  .btn-primary {
    background: #2c2c2c;
    color: white;
    border: 2px solid #2c2c2c;
  }

  .btn-primary:hover {
    background: transparent;
    color: #2c2c2c;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  .btn-secondary {
    background: transparent;
    color: #b56576;
    border: 2px solid #b56576;
  }

  .btn-secondary:hover {
    background: #b56576;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(181, 101, 118, 0.3);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .process-main {
      padding: 20px 15px;
      min-height: 70vh;
    }

    .process-info {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .action-buttons {
      flex-direction: column;
      align-items: center;
      gap: 15px;
    }

    .btn {
      width: 100%;
      max-width: 280px;
    }

    .sewing-pattern {
      width: 100px;
      height: 100px;
    }

    .thread-line {
      width: 100px !important;
    }
  }
</style>

<script>
  function updateCountdown() {
    const launchDateString = ""; // Aqu√≠ puedes poner tu fecha, por ejemplo: "2025-12-31T23:59:59"

    if (launchDateString.trim() === "") {
      return;
    }
    const launchDate = new Date(launchDateString);
    const now = new Date();
    const diff = launchDate - now;
    const d = Math.floor(diff / (1000 * 60 * 60 * 24));
    const h = Math.floor((diff / (1000 * 60 * 60)) % 24);
    const m = Math.floor((diff / 1000 / 60) % 60);
    const s = Math.floor((diff / 1000) % 60);

    document.getElementById("countdown").innerText =
      `${d} d√≠as, ${h} horas, ${m} minutos, ${s} segundos`;
  }

  setInterval(updateCountdown, 1000);
  updateCountdown();

  document.addEventListener("DOMContentLoaded", function () {
    // Efecto de escritura para los t√≠tulos
    function typeWriter(element, text, speed = 120) {
      if (!element) return;

      let i = 0;
      element.innerHTML = "";

      function type() {
        if (i < text.length) {
          element.innerHTML += text.charAt(i);
          i++;
          setTimeout(type, speed);
        }
      }

      type();
    }

    // Aplicar efecto de escritura
    setTimeout(() => {
      const processTitle = document.querySelector(".process-title");
      if (processTitle) {
        typeWriter(processTitle, "P√°gina en", 150);
      }

      setTimeout(() => {
        const processSubtitle = document.querySelector(".process-subtitle");
        if (processSubtitle) {
          typeWriter(processSubtitle, "Construcci√≥n", 100);
        }
      }, 1000);
    }, 800);

    // Animaci√≥n de entrada para las tarjetas
    const cards = document.querySelectorAll(".info-card");
    cards.forEach((card, index) => {
      card.style.opacity = "0";
      card.style.transform = "translateY(30px)";

      setTimeout(
        () => {
          card.style.transition = "all 0.6s ease";
          card.style.opacity = "1";
          card.style.transform = "translateY(0)";
        },
        2000 + index * 200
      );
    });

    // Animaci√≥n de entrada para los botones
    const buttons = document.querySelectorAll(".btn");
    buttons.forEach((button, index) => {
      button.style.opacity = "0";
      button.style.transform = "translateY(20px)";

      setTimeout(
        () => {
          button.style.transition = "all 0.6s ease";
          button.style.opacity = "1";
          button.style.transform = "translateY(0)";
        },
        2800 + index * 200
      );
    });

    // Efecto de paralaje suave
    document.addEventListener("mousemove", function (e) {
      const patterns = document.querySelectorAll(".sewing-pattern");
      const sparkles = document.querySelectorAll(".needle-sparkle");

      patterns.forEach((pattern, index) => {
        const speed = (index + 1) * 0.003;
        const x = e.clientX * speed;
        const y = e.clientY * speed;

        pattern.style.transform = `translate(${x}px, ${y}px) rotate(${index * 120}deg)`;
      });

      sparkles.forEach((sparkle, index) => {
        const speed = (index + 1) * 0.008;
        const x = e.clientX * speed;
        const y = e.clientY * speed;

        sparkle.style.transform = `translate(${x}px, ${y}px)`;
      });
    });

    // Actualizar texto de progreso aleatoriamente
    const progressTexts = [
      "Dise√±ando la experiencia perfecta...",
      "Seleccionando los mejores materiales...",
      "Cosiendo cada parte con precisi√≥n...",
      "A√±adiendo los √∫ltimos detalles...",
      "Perfeccionando la experiencia de usuario...",      
    ];

    let textIndex = 0;
    const progressText = document.querySelector(".progress-text");

    if (progressText) {
      setInterval(() => {
        textIndex = (textIndex + 1) % progressTexts.length;
        progressText.style.opacity = "0";

        setTimeout(() => {
          progressText.textContent = progressTexts[textIndex];
          progressText.style.opacity = "1";
        }, 300);
      }, 4000);
    }
  });
</script>
